generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  password       String
  country        String?
  region         String?
  address        String?
  avatarUrl      String?
  phoneNumber    String?
  token          String?
  role           Role     @relation(fields: [roleName], references: [name])
  roleName       String   @default("admin")
  sellersCreated Seller[]
}

model Seller {
  id                       String         @id @default(uuid())
  name                     String
  email                    String         @unique
  password                 String
  country                  String?
  region                   String?
  address                  String?
  avatarUrl                String?
  phoneNumber              String?
  token                    String?
  role                     Role           @relation(fields: [roleName], references: [name])
  roleName                 String         @default("seller")
  admin                    Admin          @relation(fields: [creator], references: [id])
  creator                  String
  shippingCountries        String[]
  shippingRegionsAndPrices Json[] // for example {"name":"yaounde", "shippingPrice":2000}.
  conversations            Conversation[]
  sentMessages             Message[]
  myProducts               Product[]
  recievedReports          sellerReport[]
}

model Customer {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String
  country        String?
  region         String?
  address        String?
  avatarUrl      String?
  phoneNumber    String?
  token          String?
  role           Role            @relation(fields: [roleName], references: [name])
  roleName       String          @default("customer")
  productReviews ProductReview[]
  sellerReports  sellerReport[]
  orders         Order[]
  conversations  Conversation[]
  sentMessages   Message[]
}

model Role {
  name        String     @id
  description String?
  sellers     Seller[]
  customers   Customer[]
  admins      Admin[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  imageUrl    String?
  products    Product[]
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String?
  price       Float
  quantity    Int             @default(1)
  createdAt   DateTime        @default(now())
  imagesUrl   String[]
  colors      String[]
  sizes       String[]
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  String
  seller      Seller          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId    String
  reviews     ProductReview[]
  orders      Order[]
}

model ProductReview {
  id         String   @id @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  rating     Float
  comment    String?
}

model sellerReport {
  id            String   @id @default(uuid())
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String
  seller        Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId      String
  reportMessage String
}

model Order {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  quantity   Int      @default(1)
  orderDate  DateTime @default(now())
}

model Conversation {
  id         String    @id @default(uuid())
  seller     Seller?   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId   String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?
  createdAt  DateTime  @default(now())
  messages   Message[]
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  senderSeller   Seller?      @relation(fields: [seller], references: [id], onDelete: Cascade)
  seller         String?
  senderCustomer Customer?    @relation(fields: [customer], references: [id], onDelete: Cascade)
  customer       String?
  text           String
  createdAt      DateTime     @default(now())
}

// npx prisma migrate dev --name init 

// In chapter five of the hnd on the future perspective, you realise it now if you wanna upgrade, include  functionalities fo the design of the technologies you learned in level 3.
// Add mature material for the degree.
// For the report, maintain chapter one (hnd), if you are not changing topic, change chapter 2 else no, if you are maintaning, update chapter 3 and 4.
// Refrences is a most!!!!!!
