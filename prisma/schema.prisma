generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(uuid())
  name               String
  email              String          @unique
  password           String
  country            String?
  region             String?
  address            String?
  avatarUrl          String?
  phoneNumber        String?
  tokens             String[]
  role               Role            @relation(fields: [roleName], references: [name])
  roleName           String          @default("buyer")
  sellerInfo         SellerInfo?
  productReviews     ProductReview[]
  sellerReports      sellerReport[]
  orders             Order[]
  sellerConversation Conversation[]  @relation("seller")
  buyerConversation  Conversation[]  @relation("buyer")
  sentMessages       Message[]
}

model Role {
  name        String  @id
  description String?
  users       User[]
}

model SellerInfo {
  user                     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String         @id
  shippingCountries        String[]
  shippingRegionsAndPrices Json[] // for example {name:"yaounde", shippingPrice:2000}.
  myProducts               Product[]
  recievedReports          sellerReport[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  imageUrl    String?
  products    Product[]
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String?
  price       Float
  quantity    Int             @default(1)
  createdAt   DateTime        @default(now())
  imagesUrl   String[]
  colors      String[]
  sizes       String[]
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  String
  seller      SellerInfo      @relation(fields: [sellerId], references: [userId], onDelete: Cascade)
  sellerId    String
  reviews     ProductReview[]
  orders      Order[]
}

model ProductReview {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  rating    Float
  comment   String?
}

model sellerReport {
  id            String     @id @default(uuid())
  reporter      User       @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId    String
  seller        SellerInfo @relation(fields: [sellerId], references: [userId], onDelete: Cascade)
  sellerId      String
  reportMessage String
}

model Order {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  quantity  Int      @default(1)
  orderDate DateTime @default(now())
}

model Conversation {
  id        String    @id @default(uuid())
  seller    User      @relation(fields: [sellerId], references: [id], name: "seller", onDelete: Cascade)
  sellerId  String
  buyer     User      @relation(fields: [buyerId], references: [id], name: "buyer", onDelete: Cascade)
  buyerId   String
  createdAt DateTime  @default(now())
  messages  Message[]
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  text           String
  createdAt      DateTime     @default(now())
}

// Add search products opionally with category and remove see category with list of products.
